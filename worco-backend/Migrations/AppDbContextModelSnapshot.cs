// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using worco_backend.Data;

#nullable disable

namespace worcobackend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("worco_backend.Models.Account", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("in_company")
                        .HasColumnType("boolean");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("login_id")
                        .HasColumnType("integer");

                    b.Property<string>("patronymic")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("role_id")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("login_id");

                    b.HasIndex("role_id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("worco_backend.Models.Element", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int>("height")
                        .HasColumnType("integer");

                    b.Property<string>("image")
                        .HasColumnType("text");

                    b.Property<int>("indicator_size")
                        .HasColumnType("integer");

                    b.Property<float>("indicator_x")
                        .HasColumnType("real");

                    b.Property<float>("indicator_y")
                        .HasColumnType("real");

                    b.Property<bool>("only_indicator")
                        .HasColumnType("boolean");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("width")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.ToTable("Elements");
                });

            modelBuilder.Entity("worco_backend.Models.Login", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Login");
                });

            modelBuilder.Entity("worco_backend.Models.Map", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<bool>("activity")
                        .HasColumnType("boolean");

                    b.Property<int>("height")
                        .HasColumnType("integer");

                    b.Property<string>("image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("width")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.ToTable("Maps");
                });

            modelBuilder.Entity("worco_backend.Models.MeetingRoom", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<bool>("can_bron")
                        .HasColumnType("boolean");

                    b.Property<int>("element_id")
                        .HasColumnType("integer");

                    b.Property<int>("map_id")
                        .HasColumnType("integer");

                    b.Property<int>("number_meeting_room")
                        .HasColumnType("integer");

                    b.Property<bool>("opt_conditioner")
                        .HasColumnType("boolean");

                    b.Property<bool>("opt_projector")
                        .HasColumnType("boolean");

                    b.Property<bool>("opt_soundproof")
                        .HasColumnType("boolean");

                    b.Property<bool>("opt_tv")
                        .HasColumnType("boolean");

                    b.Property<int>("price")
                        .HasColumnType("integer");

                    b.Property<bool>("visible")
                        .HasColumnType("boolean");

                    b.Property<float>("x")
                        .HasColumnType("real");

                    b.Property<float>("y")
                        .HasColumnType("real");

                    b.HasKey("id");

                    b.HasIndex("element_id");

                    b.HasIndex("map_id");

                    b.ToTable("MeetingRooms");
                });

            modelBuilder.Entity("worco_backend.Models.Office", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<bool>("can_bron")
                        .HasColumnType("boolean");

                    b.Property<int>("element_id")
                        .HasColumnType("integer");

                    b.Property<int>("map_id")
                        .HasColumnType("integer");

                    b.Property<int>("number_office")
                        .HasColumnType("integer");

                    b.Property<bool>("opt_add_equipment")
                        .HasColumnType("boolean");

                    b.Property<bool>("opt_conditioner")
                        .HasColumnType("boolean");

                    b.Property<bool>("opt_internet")
                        .HasColumnType("boolean");

                    b.Property<bool>("opt_printer")
                        .HasColumnType("boolean");

                    b.Property<bool>("opt_scanner")
                        .HasColumnType("boolean");

                    b.Property<bool>("opt_video_control")
                        .HasColumnType("boolean");

                    b.Property<int>("price")
                        .HasColumnType("integer");

                    b.Property<bool>("visible")
                        .HasColumnType("boolean");

                    b.Property<float>("x")
                        .HasColumnType("real");

                    b.Property<float>("y")
                        .HasColumnType("real");

                    b.HasKey("id");

                    b.HasIndex("element_id");

                    b.HasIndex("map_id");

                    b.ToTable("Offices");
                });

            modelBuilder.Entity("worco_backend.Models.Place", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<bool>("can_bron")
                        .HasColumnType("boolean");

                    b.Property<int>("element_id")
                        .HasColumnType("integer");

                    b.Property<int>("map_id")
                        .HasColumnType("integer");

                    b.Property<int>("number_place")
                        .HasColumnType("integer");

                    b.Property<bool>("opt_conditioner")
                        .HasColumnType("boolean");

                    b.Property<bool>("opt_printer")
                        .HasColumnType("boolean");

                    b.Property<bool>("opt_scanner")
                        .HasColumnType("boolean");

                    b.Property<int>("price")
                        .HasColumnType("integer");

                    b.Property<bool>("visible")
                        .HasColumnType("boolean");

                    b.Property<float>("x")
                        .HasColumnType("real");

                    b.Property<float>("y")
                        .HasColumnType("real");

                    b.HasKey("id");

                    b.HasIndex("element_id");

                    b.HasIndex("map_id");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("worco_backend.Models.ReservationsMeetingRooms", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("account_id")
                        .HasColumnType("integer");

                    b.Property<int?>("accountid")
                        .HasColumnType("integer");

                    b.Property<DateTime>("end_datetime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("is_delete_meeting_room")
                        .HasColumnType("boolean");

                    b.Property<bool>("is_paid")
                        .HasColumnType("boolean");

                    b.Property<int?>("meeting_room_id")
                        .HasColumnType("integer");

                    b.Property<int>("meeting_room_number")
                        .HasColumnType("integer");

                    b.Property<string>("name_map")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("price")
                        .HasColumnType("integer");

                    b.Property<DateTime>("start_datetime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.HasIndex("accountid");

                    b.HasIndex("meeting_room_id");

                    b.ToTable("ReservationsMeetingRooms");
                });

            modelBuilder.Entity("worco_backend.Models.ReservationsOffices", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("account_id")
                        .HasColumnType("integer");

                    b.Property<int?>("accountid")
                        .HasColumnType("integer");

                    b.Property<DateTime>("end_datetime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("is_delete_office")
                        .HasColumnType("boolean");

                    b.Property<bool>("is_paid")
                        .HasColumnType("boolean");

                    b.Property<string>("name_map")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("office_id")
                        .HasColumnType("integer");

                    b.Property<int>("office_number")
                        .HasColumnType("integer");

                    b.Property<int>("price")
                        .HasColumnType("integer");

                    b.Property<DateTime>("start_datetime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.HasIndex("accountid");

                    b.HasIndex("office_id");

                    b.ToTable("ReservationsOffices");
                });

            modelBuilder.Entity("worco_backend.Models.ReservationsPlaces", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<int?>("account_id")
                        .HasColumnType("integer");

                    b.Property<int?>("accountid")
                        .HasColumnType("integer");

                    b.Property<DateTime>("end_datetime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("is_delete_place")
                        .HasColumnType("boolean");

                    b.Property<bool>("is_paid")
                        .HasColumnType("boolean");

                    b.Property<string>("name_map")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("place_id")
                        .HasColumnType("integer");

                    b.Property<int>("place_number")
                        .HasColumnType("integer");

                    b.Property<int>("price")
                        .HasColumnType("integer");

                    b.Property<DateTime>("start_datetime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.HasIndex("accountid");

                    b.HasIndex("place_id");

                    b.ToTable("ReservationsPlaces");
                });

            modelBuilder.Entity("worco_backend.Models.Role", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("worco_backend.Models.Account", b =>
                {
                    b.HasOne("worco_backend.Models.Login", "login")
                        .WithMany()
                        .HasForeignKey("login_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("worco_backend.Models.Role", "role")
                        .WithMany()
                        .HasForeignKey("role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("login");

                    b.Navigation("role");
                });

            modelBuilder.Entity("worco_backend.Models.MeetingRoom", b =>
                {
                    b.HasOne("worco_backend.Models.Element", "element")
                        .WithMany("meetingRooms")
                        .HasForeignKey("element_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("worco_backend.Models.Map", "map")
                        .WithMany("meetingRooms")
                        .HasForeignKey("map_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("element");

                    b.Navigation("map");
                });

            modelBuilder.Entity("worco_backend.Models.Office", b =>
                {
                    b.HasOne("worco_backend.Models.Element", "element")
                        .WithMany("offices")
                        .HasForeignKey("element_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("worco_backend.Models.Map", "map")
                        .WithMany("offices")
                        .HasForeignKey("map_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("element");

                    b.Navigation("map");
                });

            modelBuilder.Entity("worco_backend.Models.Place", b =>
                {
                    b.HasOne("worco_backend.Models.Element", "element")
                        .WithMany("places")
                        .HasForeignKey("element_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("worco_backend.Models.Map", "map")
                        .WithMany("places")
                        .HasForeignKey("map_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("element");

                    b.Navigation("map");
                });

            modelBuilder.Entity("worco_backend.Models.ReservationsMeetingRooms", b =>
                {
                    b.HasOne("worco_backend.Models.Account", "account")
                        .WithMany()
                        .HasForeignKey("accountid");

                    b.HasOne("worco_backend.Models.MeetingRoom", "meetingRoom")
                        .WithMany("reservationsMeetingRooms")
                        .HasForeignKey("meeting_room_id");

                    b.Navigation("account");

                    b.Navigation("meetingRoom");
                });

            modelBuilder.Entity("worco_backend.Models.ReservationsOffices", b =>
                {
                    b.HasOne("worco_backend.Models.Account", "account")
                        .WithMany()
                        .HasForeignKey("accountid");

                    b.HasOne("worco_backend.Models.Office", "office")
                        .WithMany("reservationsOffices")
                        .HasForeignKey("office_id");

                    b.Navigation("account");

                    b.Navigation("office");
                });

            modelBuilder.Entity("worco_backend.Models.ReservationsPlaces", b =>
                {
                    b.HasOne("worco_backend.Models.Account", "account")
                        .WithMany()
                        .HasForeignKey("accountid");

                    b.HasOne("worco_backend.Models.Place", "place")
                        .WithMany("reservationsPlaces")
                        .HasForeignKey("place_id");

                    b.Navigation("account");

                    b.Navigation("place");
                });

            modelBuilder.Entity("worco_backend.Models.Element", b =>
                {
                    b.Navigation("meetingRooms");

                    b.Navigation("offices");

                    b.Navigation("places");
                });

            modelBuilder.Entity("worco_backend.Models.Map", b =>
                {
                    b.Navigation("meetingRooms");

                    b.Navigation("offices");

                    b.Navigation("places");
                });

            modelBuilder.Entity("worco_backend.Models.MeetingRoom", b =>
                {
                    b.Navigation("reservationsMeetingRooms");
                });

            modelBuilder.Entity("worco_backend.Models.Office", b =>
                {
                    b.Navigation("reservationsOffices");
                });

            modelBuilder.Entity("worco_backend.Models.Place", b =>
                {
                    b.Navigation("reservationsPlaces");
                });
#pragma warning restore 612, 618
        }
    }
}
